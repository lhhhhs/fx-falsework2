<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fx.server.mapper.SysJobLogMapper">
    <resultMap id="BaseResultMap" type="com.fx.server.entity.log.SysJobLog">
        <id column="job_log_id" jdbcType="BIGINT" property="jobLogId"/>
        <result column="job_name" jdbcType="VARCHAR" property="jobName"/>
        <result column="job_group" jdbcType="VARCHAR" property="jobGroup"/>
        <result column="invoke_target" jdbcType="VARCHAR" property="invokeTarget"/>
        <result column="job_message" jdbcType="VARCHAR" property="jobMessage"/>
        <result column="status" jdbcType="CHAR" property="status"/>
        <result column="exception_info" jdbcType="VARCHAR" property="exceptionInfo"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    </resultMap>
    <sql id="Base_Column_List">
        job_log_id
        , job_name, job_group, invoke_target, job_message, `status`, exception_info,
    create_time
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from sys_job_log
        where job_log_id = #{jobLogId,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete
        from sys_job_log
        where job_log_id = #{jobLogId,jdbcType=BIGINT}
    </delete>
    <insert id="insert" keyColumn="job_log_id" keyProperty="jobLogId"
            parameterType="com.fx.server.entity.log.SysJobLog" useGeneratedKeys="true">
        insert into sys_job_log (job_name, job_group, invoke_target,
                                 job_message, `status`, exception_info,
                                 create_time)
        values (#{jobName,jdbcType=VARCHAR}, #{jobGroup,jdbcType=VARCHAR}, #{invokeTarget,jdbcType=VARCHAR},
                #{jobMessage,jdbcType=VARCHAR}, #{status,jdbcType=CHAR}, #{exceptionInfo,jdbcType=VARCHAR},
                #{createTime,jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertSelective" keyColumn="job_log_id" keyProperty="jobLogId"
            parameterType="com.fx.server.entity.log.SysJobLog" useGeneratedKeys="true">
        insert into sys_job_log
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="jobName != null">
                job_name,
            </if>
            <if test="jobGroup != null">
                job_group,
            </if>
            <if test="invokeTarget != null">
                invoke_target,
            </if>
            <if test="jobMessage != null">
                job_message,
            </if>
            <if test="status != null">
                `status`,
            </if>
            <if test="exceptionInfo != null">
                exception_info,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="jobName != null">
                #{jobName,jdbcType=VARCHAR},
            </if>
            <if test="jobGroup != null">
                #{jobGroup,jdbcType=VARCHAR},
            </if>
            <if test="invokeTarget != null">
                #{invokeTarget,jdbcType=VARCHAR},
            </if>
            <if test="jobMessage != null">
                #{jobMessage,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=CHAR},
            </if>
            <if test="exceptionInfo != null">
                #{exceptionInfo,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.fx.server.entity.log.SysJobLog">
        update sys_job_log
        <set>
            <if test="jobName != null">
                job_name = #{jobName,jdbcType=VARCHAR},
            </if>
            <if test="jobGroup != null">
                job_group = #{jobGroup,jdbcType=VARCHAR},
            </if>
            <if test="invokeTarget != null">
                invoke_target = #{invokeTarget,jdbcType=VARCHAR},
            </if>
            <if test="jobMessage != null">
                job_message = #{jobMessage,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                `status` = #{status,jdbcType=CHAR},
            </if>
            <if test="exceptionInfo != null">
                exception_info = #{exceptionInfo,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where job_log_id = #{jobLogId,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.fx.server.entity.log.SysJobLog">
        update sys_job_log
        set job_name       = #{jobName,jdbcType=VARCHAR},
            job_group      = #{jobGroup,jdbcType=VARCHAR},
            invoke_target  = #{invokeTarget,jdbcType=VARCHAR},
            job_message    = #{jobMessage,jdbcType=VARCHAR},
            `status`       = #{status,jdbcType=CHAR},
            exception_info = #{exceptionInfo,jdbcType=VARCHAR},
            create_time    = #{createTime,jdbcType=TIMESTAMP}
        where job_log_id = #{jobLogId,jdbcType=BIGINT}
    </update>

    <select id="selectPage" parameterType="Map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from sys_job_log
        <where>
            <if test="params.jobName != null and params.jobName != ''">
                AND job_name like concat('%', #{params.jobName}, '%')
            </if>
            <if test="params.jobGroup != null and params.jobGroup != ''">
                AND job_group = #{params.jobGroup}
            </if>
            <if test="params.status != null and params.status != ''">
                AND status = #{params.status}
            </if>
            <if test="params.invokeTarget != null and params.invokeTarget != ''">
                AND invoke_target like concat('%', #{params.invokeTarget}, '%')
            </if>
            <if test="params.startTime != null and params.startTime != ''"><!-- 开始时间检索 -->
                and date_format(create_time,'%y%m%d') &gt;= date_format(#{params.startTime},'%y%m%d')
            </if>
            <if test="params.endTime != null and params.endTime != ''"><!-- 结束时间检索 -->
                and date_format(create_time,'%y%m%d') &lt;= date_format(#{params.endTime},'%y%m%d')
            </if>
        </where>
        ORDER BY create_time DESC
    </select>
</mapper>